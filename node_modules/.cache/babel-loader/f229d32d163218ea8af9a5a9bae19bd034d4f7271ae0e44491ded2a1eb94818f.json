{"ast":null,"code":"var _jsxFileName = \"/home/sagar/Desktop/DSA vislulisation/src/components/ArrayVisualizer.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VisualizerContainer = styled.div`\n  display: flex;\n  align-items: flex-end;\n  justify-content: center;\n  height: 300px;\n  margin: 20px 0;\n  padding: 20px;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n`;\n_c = VisualizerContainer;\nconst ArrayBar = styled.div`\n  flex: 1;\n  margin: 0 2px;\n  max-width: 50px;\n  height: ${props => props.height};\n  background-color: ${props => {\n  if (props.isPivot) return '#e74c3c'; // Red for pivot\n  if (props.isSwapped) return '#f39c12'; // Orange for swapped\n  if (props.isLeft) return '#3498db'; // Blue for left pointer\n  if (props.isRight) return '#9b59b6'; // Purple for right pointer\n  if (props.isSorted) return '#2ecc71'; // Green for sorted\n  return '#95a5a6'; // Default gray\n}};\n  transition: all 0.3s ease;\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  padding-bottom: 5px;\n  color: white;\n  font-weight: bold;\n  border-radius: 4px 4px 0 0;\n  position: relative;\n  \n  &::after {\n    content: ${props => props.isPivot ? '\"Pivot\"' : props.isLeft ? '\"Left\"' : props.isRight ? '\"Right\"' : 'none'};\n    position: absolute;\n    top: -25px;\n    font-size: 12px;\n    color: #333;\n    font-weight: normal;\n  }\n`;\n_c2 = ArrayBar;\nconst ArrayVisualizer = ({\n  array,\n  pivotIndex,\n  leftIndex,\n  rightIndex,\n  swappedIndices,\n  sortedIndices,\n  maxValue\n}) => {\n  return /*#__PURE__*/_jsxDEV(VisualizerContainer, {\n    children: array.map((value, index) => {\n      const height = `${value / maxValue * 100}%`;\n      const isPivot = pivotIndex === index;\n      const isLeft = leftIndex === index;\n      const isRight = rightIndex === index;\n      const isSwapped = (swappedIndices === null || swappedIndices === void 0 ? void 0 : swappedIndices.includes(index)) || false;\n      const isSorted = (sortedIndices === null || sortedIndices === void 0 ? void 0 : sortedIndices.includes(index)) || false;\n      return /*#__PURE__*/_jsxDEV(ArrayBar, {\n        height: height,\n        isPivot: isPivot,\n        isLeft: isLeft,\n        isRight: isRight,\n        isSwapped: isSwapped,\n        isSorted: isSorted,\n        children: value\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_c3 = ArrayVisualizer;\nexport default ArrayVisualizer;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"VisualizerContainer\");\n$RefreshReg$(_c2, \"ArrayBar\");\n$RefreshReg$(_c3, \"ArrayVisualizer\");","map":{"version":3,"names":["React","styled","jsxDEV","_jsxDEV","VisualizerContainer","div","_c","ArrayBar","props","height","isPivot","isSwapped","isLeft","isRight","isSorted","_c2","ArrayVisualizer","array","pivotIndex","leftIndex","rightIndex","swappedIndices","sortedIndices","maxValue","children","map","value","index","includes","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["/home/sagar/Desktop/DSA vislulisation/src/components/ArrayVisualizer.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\ninterface ArrayVisualizerProps {\n  array: number[];\n  pivotIndex?: number;\n  leftIndex?: number;\n  rightIndex?: number;\n  swappedIndices?: [number, number];\n  sortedIndices?: number[];\n  maxValue: number;\n}\n\nconst VisualizerContainer = styled.div`\n  display: flex;\n  align-items: flex-end;\n  justify-content: center;\n  height: 300px;\n  margin: 20px 0;\n  padding: 20px;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n`;\n\nconst ArrayBar = styled.div<{\n  height: string;\n  isPivot: boolean;\n  isLeft: boolean;\n  isRight: boolean;\n  isSwapped: boolean;\n  isSorted: boolean;\n}>`\n  flex: 1;\n  margin: 0 2px;\n  max-width: 50px;\n  height: ${props => props.height};\n  background-color: ${props => {\n    if (props.isPivot) return '#e74c3c'; // Red for pivot\n    if (props.isSwapped) return '#f39c12'; // Orange for swapped\n    if (props.isLeft) return '#3498db'; // Blue for left pointer\n    if (props.isRight) return '#9b59b6'; // Purple for right pointer\n    if (props.isSorted) return '#2ecc71'; // Green for sorted\n    return '#95a5a6'; // Default gray\n  }};\n  transition: all 0.3s ease;\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  padding-bottom: 5px;\n  color: white;\n  font-weight: bold;\n  border-radius: 4px 4px 0 0;\n  position: relative;\n  \n  &::after {\n    content: ${props => props.isPivot ? '\"Pivot\"' : props.isLeft ? '\"Left\"' : props.isRight ? '\"Right\"' : 'none'};\n    position: absolute;\n    top: -25px;\n    font-size: 12px;\n    color: #333;\n    font-weight: normal;\n  }\n`;\n\nconst ArrayVisualizer: React.FC<ArrayVisualizerProps> = ({\n  array,\n  pivotIndex,\n  leftIndex,\n  rightIndex,\n  swappedIndices,\n  sortedIndices,\n  maxValue\n}) => {\n  return (\n    <VisualizerContainer>\n      {array.map((value, index) => {\n        const height = `${(value / maxValue) * 100}%`;\n        const isPivot = pivotIndex === index;\n        const isLeft = leftIndex === index;\n        const isRight = rightIndex === index;\n        const isSwapped = swappedIndices?.includes(index) || false;\n        const isSorted = sortedIndices?.includes(index) || false;\n\n        return (\n          <ArrayBar\n            key={index}\n            height={height}\n            isPivot={isPivot}\n            isLeft={isLeft}\n            isRight={isRight}\n            isSwapped={isSwapped}\n            isSorted={isSorted}\n          >\n            {value}\n          </ArrayBar>\n        );\n      })}\n    </VisualizerContainer>\n  );\n};\n\nexport default ArrayVisualizer; "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAYvC,MAAMC,mBAAmB,GAAGH,MAAM,CAACI,GAAG;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GAVIF,mBAAmB;AAYzB,MAAMG,QAAQ,GAAGN,MAAM,CAACI,GAOtB;AACF;AACA;AACA;AACA,YAAYG,KAAK,IAAIA,KAAK,CAACC,MAAM;AACjC,sBAAsBD,KAAK,IAAI;EAC3B,IAAIA,KAAK,CAACE,OAAO,EAAE,OAAO,SAAS,CAAC,CAAC;EACrC,IAAIF,KAAK,CAACG,SAAS,EAAE,OAAO,SAAS,CAAC,CAAC;EACvC,IAAIH,KAAK,CAACI,MAAM,EAAE,OAAO,SAAS,CAAC,CAAC;EACpC,IAAIJ,KAAK,CAACK,OAAO,EAAE,OAAO,SAAS,CAAC,CAAC;EACrC,IAAIL,KAAK,CAACM,QAAQ,EAAE,OAAO,SAAS,CAAC,CAAC;EACtC,OAAO,SAAS,CAAC,CAAC;AACpB,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeN,KAAK,IAAIA,KAAK,CAACE,OAAO,GAAG,SAAS,GAAGF,KAAK,CAACI,MAAM,GAAG,QAAQ,GAAGJ,KAAK,CAACK,OAAO,GAAG,SAAS,GAAG,MAAM;AAChH;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACE,GAAA,GAtCIR,QAAQ;AAwCd,MAAMS,eAA+C,GAAGA,CAAC;EACvDC,KAAK;EACLC,UAAU;EACVC,SAAS;EACTC,UAAU;EACVC,cAAc;EACdC,aAAa;EACbC;AACF,CAAC,KAAK;EACJ,oBACEpB,OAAA,CAACC,mBAAmB;IAAAoB,QAAA,EACjBP,KAAK,CAACQ,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;MAC3B,MAAMlB,MAAM,GAAG,GAAIiB,KAAK,GAAGH,QAAQ,GAAI,GAAG,GAAG;MAC7C,MAAMb,OAAO,GAAGQ,UAAU,KAAKS,KAAK;MACpC,MAAMf,MAAM,GAAGO,SAAS,KAAKQ,KAAK;MAClC,MAAMd,OAAO,GAAGO,UAAU,KAAKO,KAAK;MACpC,MAAMhB,SAAS,GAAG,CAAAU,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEO,QAAQ,CAACD,KAAK,CAAC,KAAI,KAAK;MAC1D,MAAMb,QAAQ,GAAG,CAAAQ,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEM,QAAQ,CAACD,KAAK,CAAC,KAAI,KAAK;MAExD,oBACExB,OAAA,CAACI,QAAQ;QAEPE,MAAM,EAAEA,MAAO;QACfC,OAAO,EAAEA,OAAQ;QACjBE,MAAM,EAAEA,MAAO;QACfC,OAAO,EAAEA,OAAQ;QACjBF,SAAS,EAAEA,SAAU;QACrBG,QAAQ,EAAEA,QAAS;QAAAU,QAAA,EAElBE;MAAK,GARDC,KAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASF,CAAC;IAEf,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACiB,CAAC;AAE1B,CAAC;AAACC,GAAA,GAnCIjB,eAA+C;AAqCrD,eAAeA,eAAe;AAAC,IAAAV,EAAA,EAAAS,GAAA,EAAAkB,GAAA;AAAAC,YAAA,CAAA5B,EAAA;AAAA4B,YAAA,CAAAnB,GAAA;AAAAmB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}