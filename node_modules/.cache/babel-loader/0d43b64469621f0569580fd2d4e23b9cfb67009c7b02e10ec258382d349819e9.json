{"ast":null,"code":"export const selectionSort = originalArray => {\n  const array = [...originalArray];\n  const steps = [];\n  let comparisons = 0;\n  let swaps = 0;\n  const sortedIndices = [];\n\n  // Add initial state\n  steps.push({\n    array: [...array],\n    sortedIndices: [...sortedIndices]\n  });\n  for (let i = 0; i < array.length - 1; i++) {\n    let minIndex = i;\n\n    // Add step to show current position\n    steps.push({\n      array: [...array],\n      currentIndex: i,\n      minIndex,\n      sortedIndices: [...sortedIndices]\n    });\n    for (let j = i + 1; j < array.length; j++) {\n      // Add step for each comparison\n      steps.push({\n        array: [...array],\n        currentIndex: i,\n        minIndex,\n        comparingIndex: j,\n        sortedIndices: [...sortedIndices]\n      });\n      comparisons++;\n      if (array[j] < array[minIndex]) {\n        minIndex = j;\n\n        // Add step to show new minimum\n        steps.push({\n          array: [...array],\n          currentIndex: i,\n          minIndex,\n          sortedIndices: [...sortedIndices]\n        });\n      }\n    }\n    if (minIndex !== i) {\n      // Swap elements\n      [array[i], array[minIndex]] = [array[minIndex], array[i]];\n      swaps++;\n\n      // Add step to show swap\n      steps.push({\n        array: [...array],\n        currentIndex: i,\n        swappedIndices: [i, minIndex],\n        sortedIndices: [...sortedIndices]\n      });\n    }\n\n    // Mark current position as sorted\n    sortedIndices.push(i);\n\n    // Add step to show updated sorted portion\n    steps.push({\n      array: [...array],\n      currentIndex: i,\n      sortedIndices: [...sortedIndices]\n    });\n  }\n\n  // Mark the last element as sorted\n  sortedIndices.push(array.length - 1);\n\n  // Add final state\n  steps.push({\n    array: [...array],\n    sortedIndices: [...sortedIndices]\n  });\n  return {\n    sortedArray: array,\n    steps,\n    comparisons,\n    swaps\n  };\n};","map":{"version":3,"names":["selectionSort","originalArray","array","steps","comparisons","swaps","sortedIndices","push","i","length","minIndex","currentIndex","j","comparingIndex","swappedIndices","sortedArray"],"sources":["/home/sagar/Desktop/DSA vislulisation/src/algorithms/selectionSort.ts"],"sourcesContent":["export interface SelectionSortStep {\n  array: number[];\n  currentIndex?: number;\n  minIndex?: number;\n  comparingIndex?: number;\n  swappedIndices?: [number, number];\n  sortedIndices: number[];\n}\n\nexport interface SelectionSortResult {\n  sortedArray: number[];\n  steps: SelectionSortStep[];\n  comparisons: number;\n  swaps: number;\n}\n\nexport const selectionSort = (originalArray: number[]): SelectionSortResult => {\n  const array = [...originalArray];\n  const steps: SelectionSortStep[] = [];\n  let comparisons = 0;\n  let swaps = 0;\n  const sortedIndices: number[] = [];\n\n  // Add initial state\n  steps.push({\n    array: [...array],\n    sortedIndices: [...sortedIndices]\n  });\n\n  for (let i = 0; i < array.length - 1; i++) {\n    let minIndex = i;\n    \n    // Add step to show current position\n    steps.push({\n      array: [...array],\n      currentIndex: i,\n      minIndex,\n      sortedIndices: [...sortedIndices]\n    });\n\n    for (let j = i + 1; j < array.length; j++) {\n      // Add step for each comparison\n      steps.push({\n        array: [...array],\n        currentIndex: i,\n        minIndex,\n        comparingIndex: j,\n        sortedIndices: [...sortedIndices]\n      });\n      \n      comparisons++;\n      \n      if (array[j] < array[minIndex]) {\n        minIndex = j;\n        \n        // Add step to show new minimum\n        steps.push({\n          array: [...array],\n          currentIndex: i,\n          minIndex,\n          sortedIndices: [...sortedIndices]\n        });\n      }\n    }\n\n    if (minIndex !== i) {\n      // Swap elements\n      [array[i], array[minIndex]] = [array[minIndex], array[i]];\n      swaps++;\n      \n      // Add step to show swap\n      steps.push({\n        array: [...array],\n        currentIndex: i,\n        swappedIndices: [i, minIndex],\n        sortedIndices: [...sortedIndices]\n      });\n    }\n    \n    // Mark current position as sorted\n    sortedIndices.push(i);\n    \n    // Add step to show updated sorted portion\n    steps.push({\n      array: [...array],\n      currentIndex: i,\n      sortedIndices: [...sortedIndices]\n    });\n  }\n  \n  // Mark the last element as sorted\n  sortedIndices.push(array.length - 1);\n  \n  // Add final state\n  steps.push({\n    array: [...array],\n    sortedIndices: [...sortedIndices]\n  });\n\n  return {\n    sortedArray: array,\n    steps,\n    comparisons,\n    swaps\n  };\n};\n"],"mappings":"AAgBA,OAAO,MAAMA,aAAa,GAAIC,aAAuB,IAA0B;EAC7E,MAAMC,KAAK,GAAG,CAAC,GAAGD,aAAa,CAAC;EAChC,MAAME,KAA0B,GAAG,EAAE;EACrC,IAAIC,WAAW,GAAG,CAAC;EACnB,IAAIC,KAAK,GAAG,CAAC;EACb,MAAMC,aAAuB,GAAG,EAAE;;EAElC;EACAH,KAAK,CAACI,IAAI,CAAC;IACTL,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC;IACjBI,aAAa,EAAE,CAAC,GAAGA,aAAa;EAClC,CAAC,CAAC;EAEF,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,KAAK,CAACO,MAAM,GAAG,CAAC,EAAED,CAAC,EAAE,EAAE;IACzC,IAAIE,QAAQ,GAAGF,CAAC;;IAEhB;IACAL,KAAK,CAACI,IAAI,CAAC;MACTL,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC;MACjBS,YAAY,EAAEH,CAAC;MACfE,QAAQ;MACRJ,aAAa,EAAE,CAAC,GAAGA,aAAa;IAClC,CAAC,CAAC;IAEF,KAAK,IAAIM,CAAC,GAAGJ,CAAC,GAAG,CAAC,EAAEI,CAAC,GAAGV,KAAK,CAACO,MAAM,EAAEG,CAAC,EAAE,EAAE;MACzC;MACAT,KAAK,CAACI,IAAI,CAAC;QACTL,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC;QACjBS,YAAY,EAAEH,CAAC;QACfE,QAAQ;QACRG,cAAc,EAAED,CAAC;QACjBN,aAAa,EAAE,CAAC,GAAGA,aAAa;MAClC,CAAC,CAAC;MAEFF,WAAW,EAAE;MAEb,IAAIF,KAAK,CAACU,CAAC,CAAC,GAAGV,KAAK,CAACQ,QAAQ,CAAC,EAAE;QAC9BA,QAAQ,GAAGE,CAAC;;QAEZ;QACAT,KAAK,CAACI,IAAI,CAAC;UACTL,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC;UACjBS,YAAY,EAAEH,CAAC;UACfE,QAAQ;UACRJ,aAAa,EAAE,CAAC,GAAGA,aAAa;QAClC,CAAC,CAAC;MACJ;IACF;IAEA,IAAII,QAAQ,KAAKF,CAAC,EAAE;MAClB;MACA,CAACN,KAAK,CAACM,CAAC,CAAC,EAAEN,KAAK,CAACQ,QAAQ,CAAC,CAAC,GAAG,CAACR,KAAK,CAACQ,QAAQ,CAAC,EAAER,KAAK,CAACM,CAAC,CAAC,CAAC;MACzDH,KAAK,EAAE;;MAEP;MACAF,KAAK,CAACI,IAAI,CAAC;QACTL,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC;QACjBS,YAAY,EAAEH,CAAC;QACfM,cAAc,EAAE,CAACN,CAAC,EAAEE,QAAQ,CAAC;QAC7BJ,aAAa,EAAE,CAAC,GAAGA,aAAa;MAClC,CAAC,CAAC;IACJ;;IAEA;IACAA,aAAa,CAACC,IAAI,CAACC,CAAC,CAAC;;IAErB;IACAL,KAAK,CAACI,IAAI,CAAC;MACTL,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC;MACjBS,YAAY,EAAEH,CAAC;MACfF,aAAa,EAAE,CAAC,GAAGA,aAAa;IAClC,CAAC,CAAC;EACJ;;EAEA;EACAA,aAAa,CAACC,IAAI,CAACL,KAAK,CAACO,MAAM,GAAG,CAAC,CAAC;;EAEpC;EACAN,KAAK,CAACI,IAAI,CAAC;IACTL,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC;IACjBI,aAAa,EAAE,CAAC,GAAGA,aAAa;EAClC,CAAC,CAAC;EAEF,OAAO;IACLS,WAAW,EAAEb,KAAK;IAClBC,KAAK;IACLC,WAAW;IACXC;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}