{"ast":null,"code":"export const insertionSort = originalArray => {\n  const array = [...originalArray];\n  const steps = [];\n  let comparisons = 0;\n  let shifts = 0;\n  const sortedIndices = [0]; // First element is already \"sorted\"\n\n  // Add initial state\n  steps.push({\n    array: [...array],\n    sortedIndices: [...sortedIndices]\n  });\n  for (let i = 1; i < array.length; i++) {\n    const current = array[i];\n    let j = i - 1;\n\n    // Add step to show current element being considered\n    steps.push({\n      array: [...array],\n      currentIndex: i,\n      sortedIndices: [...sortedIndices]\n    });\n\n    // Find the position to insert the current element\n    while (j >= 0) {\n      // Add step for each comparison\n      steps.push({\n        array: [...array],\n        currentIndex: i,\n        comparingIndex: j,\n        sortedIndices: [...sortedIndices]\n      });\n      comparisons++;\n      if (array[j] <= current) {\n        break;\n      }\n\n      // Shift elements to the right\n      array[j + 1] = array[j];\n      shifts++;\n\n      // Add step to show shift\n      const tempArray = [...array];\n      tempArray[j] = current; // Visualize where current will go\n\n      steps.push({\n        array: [...array],\n        currentIndex: i,\n        insertPosition: j,\n        sortedIndices: [...sortedIndices]\n      });\n      j--;\n    }\n\n    // Insert the current element at the correct position\n    array[j + 1] = current;\n\n    // Add step to show insertion\n    steps.push({\n      array: [...array],\n      sortedIndices: [...sortedIndices]\n    });\n\n    // Update sorted indices\n    sortedIndices.push(i);\n\n    // Add step to show updated sorted portion\n    steps.push({\n      array: [...array],\n      sortedIndices: [...sortedIndices]\n    });\n  }\n  return {\n    sortedArray: array,\n    steps,\n    comparisons,\n    shifts\n  };\n};","map":{"version":3,"names":["insertionSort","originalArray","array","steps","comparisons","shifts","sortedIndices","push","i","length","current","j","currentIndex","comparingIndex","tempArray","insertPosition","sortedArray"],"sources":["/home/sagar/Desktop/DSA vislulisation/src/algorithms/insertionSort.ts"],"sourcesContent":["export interface InsertionSortStep {\n  array: number[];\n  currentIndex?: number;\n  comparingIndex?: number;\n  insertPosition?: number;\n  sortedIndices: number[];\n}\n\nexport interface InsertionSortResult {\n  sortedArray: number[];\n  steps: InsertionSortStep[];\n  comparisons: number;\n  shifts: number;\n}\n\nexport const insertionSort = (originalArray: number[]): InsertionSortResult => {\n  const array = [...originalArray];\n  const steps: InsertionSortStep[] = [];\n  let comparisons = 0;\n  let shifts = 0;\n  const sortedIndices: number[] = [0]; // First element is already \"sorted\"\n\n  // Add initial state\n  steps.push({\n    array: [...array],\n    sortedIndices: [...sortedIndices]\n  });\n\n  for (let i = 1; i < array.length; i++) {\n    const current = array[i];\n    let j = i - 1;\n    \n    // Add step to show current element being considered\n    steps.push({\n      array: [...array],\n      currentIndex: i,\n      sortedIndices: [...sortedIndices]\n    });\n    \n    // Find the position to insert the current element\n    while (j >= 0) {\n      // Add step for each comparison\n      steps.push({\n        array: [...array],\n        currentIndex: i,\n        comparingIndex: j,\n        sortedIndices: [...sortedIndices]\n      });\n      \n      comparisons++;\n      \n      if (array[j] <= current) {\n        break;\n      }\n      \n      // Shift elements to the right\n      array[j + 1] = array[j];\n      shifts++;\n      \n      // Add step to show shift\n      const tempArray = [...array];\n      tempArray[j] = current; // Visualize where current will go\n      \n      steps.push({\n        array: [...array],\n        currentIndex: i,\n        insertPosition: j,\n        sortedIndices: [...sortedIndices]\n      });\n      \n      j--;\n    }\n    \n    // Insert the current element at the correct position\n    array[j + 1] = current;\n    \n    // Add step to show insertion\n    steps.push({\n      array: [...array],\n      sortedIndices: [...sortedIndices]\n    });\n    \n    // Update sorted indices\n    sortedIndices.push(i);\n    \n    // Add step to show updated sorted portion\n    steps.push({\n      array: [...array],\n      sortedIndices: [...sortedIndices]\n    });\n  }\n\n  return {\n    sortedArray: array,\n    steps,\n    comparisons,\n    shifts\n  };\n};\n"],"mappings":"AAeA,OAAO,MAAMA,aAAa,GAAIC,aAAuB,IAA0B;EAC7E,MAAMC,KAAK,GAAG,CAAC,GAAGD,aAAa,CAAC;EAChC,MAAME,KAA0B,GAAG,EAAE;EACrC,IAAIC,WAAW,GAAG,CAAC;EACnB,IAAIC,MAAM,GAAG,CAAC;EACd,MAAMC,aAAuB,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;EAErC;EACAH,KAAK,CAACI,IAAI,CAAC;IACTL,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC;IACjBI,aAAa,EAAE,CAAC,GAAGA,aAAa;EAClC,CAAC,CAAC;EAEF,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,KAAK,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,MAAME,OAAO,GAAGR,KAAK,CAACM,CAAC,CAAC;IACxB,IAAIG,CAAC,GAAGH,CAAC,GAAG,CAAC;;IAEb;IACAL,KAAK,CAACI,IAAI,CAAC;MACTL,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC;MACjBU,YAAY,EAAEJ,CAAC;MACfF,aAAa,EAAE,CAAC,GAAGA,aAAa;IAClC,CAAC,CAAC;;IAEF;IACA,OAAOK,CAAC,IAAI,CAAC,EAAE;MACb;MACAR,KAAK,CAACI,IAAI,CAAC;QACTL,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC;QACjBU,YAAY,EAAEJ,CAAC;QACfK,cAAc,EAAEF,CAAC;QACjBL,aAAa,EAAE,CAAC,GAAGA,aAAa;MAClC,CAAC,CAAC;MAEFF,WAAW,EAAE;MAEb,IAAIF,KAAK,CAACS,CAAC,CAAC,IAAID,OAAO,EAAE;QACvB;MACF;;MAEA;MACAR,KAAK,CAACS,CAAC,GAAG,CAAC,CAAC,GAAGT,KAAK,CAACS,CAAC,CAAC;MACvBN,MAAM,EAAE;;MAER;MACA,MAAMS,SAAS,GAAG,CAAC,GAAGZ,KAAK,CAAC;MAC5BY,SAAS,CAACH,CAAC,CAAC,GAAGD,OAAO,CAAC,CAAC;;MAExBP,KAAK,CAACI,IAAI,CAAC;QACTL,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC;QACjBU,YAAY,EAAEJ,CAAC;QACfO,cAAc,EAAEJ,CAAC;QACjBL,aAAa,EAAE,CAAC,GAAGA,aAAa;MAClC,CAAC,CAAC;MAEFK,CAAC,EAAE;IACL;;IAEA;IACAT,KAAK,CAACS,CAAC,GAAG,CAAC,CAAC,GAAGD,OAAO;;IAEtB;IACAP,KAAK,CAACI,IAAI,CAAC;MACTL,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC;MACjBI,aAAa,EAAE,CAAC,GAAGA,aAAa;IAClC,CAAC,CAAC;;IAEF;IACAA,aAAa,CAACC,IAAI,CAACC,CAAC,CAAC;;IAErB;IACAL,KAAK,CAACI,IAAI,CAAC;MACTL,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC;MACjBI,aAAa,EAAE,CAAC,GAAGA,aAAa;IAClC,CAAC,CAAC;EACJ;EAEA,OAAO;IACLU,WAAW,EAAEd,KAAK;IAClBC,KAAK;IACLC,WAAW;IACXC;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}